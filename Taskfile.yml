version: '3'

vars:
  BINARY_NAME: compass
  BUILD_DIR: dist
  MAIN_PATH: ./main.go
  MODULE:
    sh: go list -m
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
  BUILD_DATE:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  BUILD_USER:
    sh: whoami 2>/dev/null || echo "unknown"
  BUILD_HOST:
    sh: hostname 2>/dev/null || echo "unknown"
  BUILD_ARCH:
    sh: echo "$(go env GOOS)/$(go env GOARCH)"

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all

  build:
    desc: Build the application
    cmds:
      - mkdir {{.BUILD_DIR}} || true
      - go build -ldflags="-X {{.MODULE}}/internal/version.Version={{.VERSION}} -X {{.MODULE}}/internal/version.Commit={{.COMMIT}} -X {{.MODULE}}/internal/version.BuildDate={{.BUILD_DATE}} -X {{.MODULE}}/internal/version.BuildUser={{.BUILD_USER}} -X {{.MODULE}}/internal/version.BuildHost={{.BUILD_HOST}} -X {{.MODULE}}/internal/version.BuildArch={{.BUILD_ARCH}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.MAIN_PATH}}

  build-all:
    desc: Build for multiple platforms
    cmds:
      - task: build-linux
      - task: build-linux-arm64
      - task: build-darwin
      - task: build-darwin-arm64
      - task: build-windows

  build-linux:
    desc: Build for Linux
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - mkdir {{.BUILD_DIR}} || true
      - go build -ldflags="-X {{.MODULE}}/internal/version.Version={{.VERSION}} -X {{.MODULE}}/internal/version.Commit={{.COMMIT}} -X {{.MODULE}}/internal/version.BuildDate={{.BUILD_DATE}} -X {{.MODULE}}/internal/version.BuildUser={{.BUILD_USER}} -X {{.MODULE}}/internal/version.BuildHost={{.BUILD_HOST}} -X {{.MODULE}}/internal/version.BuildArch={{.BUILD_ARCH}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-amd64 {{.MAIN_PATH}}

  build-linux-arm64:
    desc: Build for Linux ARM64
    env:
      GOOS: linux
      GOARCH: arm64
    cmds:
      - mkdir {{.BUILD_DIR}} || true
      - go build -ldflags="-X {{.MODULE}}/internal/version.Version={{.VERSION}} -X {{.MODULE}}/internal/version.Commit={{.COMMIT}} -X {{.MODULE}}/internal/version.BuildDate={{.BUILD_DATE}} -X {{.MODULE}}/internal/version.BuildUser={{.BUILD_USER}} -X {{.MODULE}}/internal/version.BuildHost={{.BUILD_HOST}} -X {{.MODULE}}/internal/version.BuildArch={{.BUILD_ARCH}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-arm64 {{.MAIN_PATH}}

  build-darwin:
    desc: Build for macOS
    env:
      GOOS: darwin
      GOARCH: amd64
    cmds:
      - mkdir {{.BUILD_DIR}} || true
      - go build -ldflags="-X {{.MODULE}}/internal/version.Version={{.VERSION}} -X {{.MODULE}}/internal/version.Commit={{.COMMIT}} -X {{.MODULE}}/internal/version.BuildDate={{.BUILD_DATE}} -X {{.MODULE}}/internal/version.BuildUser={{.BUILD_USER}} -X {{.MODULE}}/internal/version.BuildHost={{.BUILD_HOST}} -X {{.MODULE}}/internal/version.BuildArch={{.BUILD_ARCH}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-amd64 {{.MAIN_PATH}}

  build-darwin-arm64:
    desc: Build for macOS ARM64
    env:
      GOOS: darwin
      GOARCH: arm64
    cmds:
      - mkdir {{.BUILD_DIR}} || true
      - go build -ldflags="-X {{.MODULE}}/internal/version.Version={{.VERSION}} -X {{.MODULE}}/internal/version.Commit={{.COMMIT}} -X {{.MODULE}}/internal/version.BuildDate={{.BUILD_DATE}} -X {{.MODULE}}/internal/version.BuildUser={{.BUILD_USER}} -X {{.MODULE}}/internal/version.BuildHost={{.BUILD_HOST}} -X {{.MODULE}}/internal/version.BuildArch={{.BUILD_ARCH}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-arm64 {{.MAIN_PATH}}

  build-windows:
    desc: Build for Windows
    env:
      GOOS: windows
      GOARCH: amd64
    cmds:
      - mkdir {{.BUILD_DIR}} || true
      - go build -ldflags="-X {{.MODULE}}/internal/version.Version={{.VERSION}} -X {{.MODULE}}/internal/version.Commit={{.COMMIT}} -X {{.MODULE}}/internal/version.BuildDate={{.BUILD_DATE}} -X {{.MODULE}}/internal/version.BuildUser={{.BUILD_USER}} -X {{.MODULE}}/internal/version.BuildHost={{.BUILD_HOST}} -X {{.MODULE}}/internal/version.BuildArch={{.BUILD_ARCH}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-windows-amd64.exe {{.MAIN_PATH}}

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  test-short:
    desc: Run tests in short mode (skip integration tests)
    cmds:
      - go test -short -v ./...

  test-coverage:
    desc: Run tests with coverage
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html

  test-coverage-func:
    desc: Run tests with coverage and show function coverage
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -func=coverage.out

  test-race:
    desc: Run tests with race detector
    cmds:
      - go test -race -v ./...

  test-bench:
    desc: Run benchmark tests
    cmds:
      - go test -bench=. -v ./...

  test-unit:
    desc: Run only unit tests (exclude integration tests)
    cmds:
      - go test -short -v ./internal/...

  test-integration:
    desc: Run integration tests
    cmds:
      - go test -v ./cmd/... ./main_test.go

  lint:
    desc: Run golangci-lint with configuration
    cmds:
      - golangci-lint run ./...

  lint-fix:
    desc: Run golangci-lint and fix auto-fixable issues
    cmds:
      - golangci-lint run --fix ./...

  lint-verbose:
    desc: Run golangci-lint with verbose output
    cmds:
      - golangci-lint run -v ./...

  lint-new:
    desc: Run golangci-lint only on new/changed files (requires git)
    cmds:
      - golangci-lint run --new-from-rev=HEAD~1 ./...

  fmt:
    desc: Format code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  mod-tidy:
    desc: Tidy module dependencies
    cmds:
      - go mod tidy

  mod-vendor:
    desc: Vendor dependencies
    cmds:
      - go mod vendor

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - rm -f coverage.out coverage.html
      - rm -rf vendor/
      - rm -rf tmp/

  install:
    desc: Install the application to ~/.local/bin with shell completions
    cmds:
      - task: build
      - echo "Installing {{.BINARY_NAME}} to $HOME/.local/bin..."
      - mkdir -p $HOME/.local/bin
      - |
        if [ -f "$HOME/.local/bin/{{.BINARY_NAME}}" ]; then
          echo "Backing up existing binary to {{.BINARY_NAME}}.backup"
          cp "$HOME/.local/bin/{{.BINARY_NAME}}" "$HOME/.local/bin/{{.BINARY_NAME}}.backup"
        fi
      - cp {{.BUILD_DIR}}/{{.BINARY_NAME}} $HOME/.local/bin/
      - chmod +x $HOME/.local/bin/{{.BINARY_NAME}}
      - |
        if [ ! -f "$HOME/.local/bin/cps" ] || [ ! -L "$HOME/.local/bin/cps" ]; then
          echo "Creating cps alias symlink..."
          ln -sf "$HOME/.local/bin/{{.BINARY_NAME}}" "$HOME/.local/bin/cps"
        fi
      - echo "Installing shell completions..."
      - mkdir -p $HOME/.local/share/bash-completion/completions
      - $HOME/.local/bin/{{.BINARY_NAME}} completion bash > $HOME/.local/share/bash-completion/completions/{{.BINARY_NAME}}
      - mkdir -p $HOME/.local/share/zsh/site-functions
      - $HOME/.local/bin/{{.BINARY_NAME}} completion zsh > $HOME/.local/share/zsh/site-functions/_{{.BINARY_NAME}}
      - mkdir -p $HOME/.config/fish/completions
      - $HOME/.local/bin/{{.BINARY_NAME}} completion fish > $HOME/.config/fish/completions/{{.BINARY_NAME}}.fish
      - |
        if command -v pwsh >/dev/null 2>&1; then
          echo "Installing PowerShell completion..."
          PWSH_PROFILE_DIR=$(pwsh -NoProfile -Command 'Split-Path $PROFILE')
          mkdir -p "$PWSH_PROFILE_DIR"
          $HOME/.local/bin/{{.BINARY_NAME}} completion powershell > "$PWSH_PROFILE_DIR/{{.BINARY_NAME}}_completion.ps1"
          echo "  PowerShell completion installed. Add this to your profile (\$PROFILE):"
          echo "  . \"\$PSScriptRoot/{{.BINARY_NAME}}_completion.ps1\""
        fi
      - echo "✓ Installation complete!"
      - $HOME/.local/bin/{{.BINARY_NAME}} version
      - |
        if ! echo "$PATH" | grep -q "$HOME/.local/bin"; then
          echo ""
          echo "⚠️  Warning: $HOME/.local/bin is not in your PATH"
          echo "   Add this to your shell profile (.bashrc, .zshrc, etc.):"
          echo "   export PATH=\"\$HOME/.local/bin:\$PATH\""
        fi

  uninstall:
    desc: Uninstall the application and remove shell completions
    cmds:
      - echo "Uninstalling {{.BINARY_NAME}}..."
      - rm -f $HOME/.local/bin/{{.BINARY_NAME}}
      - rm -f $HOME/.local/bin/cps
      - rm -f $HOME/.local/bin/{{.BINARY_NAME}}.backup
      - rm -f $HOME/.local/share/bash-completion/completions/{{.BINARY_NAME}}
      - rm -f $HOME/.local/share/zsh/site-functions/_{{.BINARY_NAME}}
      - rm -f $HOME/.config/fish/completions/{{.BINARY_NAME}}.fish
      - |
        if command -v pwsh >/dev/null 2>&1; then
          PWSH_PROFILE_DIR=$(pwsh -NoProfile -Command 'Split-Path $PROFILE')
          rm -f "$PWSH_PROFILE_DIR/{{.BINARY_NAME}}_completion.ps1"
          echo "  PowerShell completion removed. You may need to remove the sourcing line from your profile (\$PROFILE)"
        fi
      - echo "✓ Uninstall complete!"

  run:
    desc: Run the application
    cmds:
      - go run {{.MAIN_PATH}} {{.CLI_ARGS}}

  dev:
    desc: Development mode with auto-reload (requires air)
    cmds:
      - air

  test-watch:
    desc: Run tests in watch mode (requires entr)
    cmds:
      - find . -name '*.go' | entr -c go test -v ./...

  check:
    desc: Run all checks (fmt, vet, lint, test)
    cmds:
      - task: fmt
      - task: vet
      - task: lint
      - task: test

  ci:
    desc: Run CI checks (used for continuous integration)
    cmds:
      - task: fmt
      - task: vet
      - task: test-race
      - task: test-coverage-func

  release:
    desc: Build release binaries
    cmds:
      - task: clean
      - task: check
      - task: build-all

  help:
    desc: Show help for the built application
    cmds:
      - ./{{.BINARY_NAME}} --help
